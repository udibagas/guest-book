import React, { useState, useEffect } from "react";
import {
  Table,
  Card,
  Input,
  Button,
  Space,
  Tag,
  Typography,
  Row,
  Col,
  Statistic,
  DatePicker,
  Select,
  Modal,
  Image,
  message,
  Popconfirm,
} from "antd";
import {
  SearchOutlined,
  ReloadOutlined,
  EyeOutlined,
  LogoutOutlined,
  DeleteOutlined,
  ArrowLeftOutlined,
  UserOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
} from "@ant-design/icons";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import dayjs from "dayjs";

const { Title } = Typography;
const { RangePicker } = DatePicker;
const { Option } = Select;

const Admin = () => {
  const [guests, setGuests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({});
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });
  const [filters, setFilters] = useState({
    search: "",
    status: "",
    dateRange: null,
  });
  const [selectedGuest, setSelectedGuest] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    fetchGuests();
    fetchStats();
  }, [pagination.current, pagination.pageSize, filters]);

  const fetchGuests = async () => {
    setLoading(true);
    try {
      const params = {
        page: pagination.current,
        limit: pagination.pageSize,
        ...(filters.search && { search: filters.search }),
        ...(filters.status && { status: filters.status }),
        ...(filters.dateRange && {
          startDate: filters.dateRange[0].format("YYYY-MM-DD"),
          endDate: filters.dateRange[1].format("YYYY-MM-DD"),
        }),
      };

      const response = await axios.get("/api/guests", { params });

      setGuests(response.data.data.guests);
      setPagination((prev) => ({
        ...prev,
        total: response.data.data.pagination.totalCount,
      }));
    } catch (error) {
      console.error("Error fetching guests:", error);
      message.error("Failed to fetch guest data");
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await axios.get("/api/guests/stats");
      setStats(response.data.data);
    } catch (error) {
      console.error("Error fetching stats:", error);
    }
  };

  const handleTableChange = (newPagination) => {
    setPagination(newPagination);
  };

  const handleSearch = (value) => {
    setFilters((prev) => ({ ...prev, search: value }));
    setPagination((prev) => ({ ...prev, current: 1 }));
  };

  const handleStatusFilter = (value) => {
    setFilters((prev) => ({ ...prev, status: value }));
    setPagination((prev) => ({ ...prev, current: 1 }));
  };

  const handleDateFilter = (dates) => {
    setFilters((prev) => ({ ...prev, dateRange: dates }));
    setPagination((prev) => ({ ...prev, current: 1 }));
  };

  const handleCheckOut = async (guestId) => {
    try {
      await axios.put(`/api/guests/${guestId}/checkout`);
      message.success("Guest checked out successfully");
      fetchGuests();
      fetchStats();
    } catch (error) {
      console.error("Error checking out guest:", error);
      message.error("Failed to check out guest");
    }
  };

  const handleDelete = async (guestId) => {
    try {
      await axios.delete(`/api/guests/${guestId}`);
      message.success("Guest record deleted successfully");
      fetchGuests();
      fetchStats();
    } catch (error) {
      console.error("Error deleting guest:", error);
      message.error("Failed to delete guest record");
    }
  };

  const showGuestDetails = (guest) => {
    setSelectedGuest(guest);
    setModalVisible(true);
  };

  const columns = [
    {
      title: "Name",
      dataIndex: "name",
      key: "name",
      sorter: true,
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
    },
    {
      title: "Phone",
      dataIndex: "phoneNumber",
      key: "phoneNumber",
    },
    {
      title: "Company",
      dataIndex: "company",
      key: "company",
      render: (company) => company || "-",
    },
    {
      title: "Role",
      dataIndex: "role",
      key: "role",
    },
    {
      title: "Check In",
      dataIndex: "checkInTime",
      key: "checkInTime",
      render: (time) => dayjs(time).format("DD/MM/YYYY HH:mm"),
    },
    {
      title: "Status",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={status === "checked_in" ? "green" : "blue"}>
          {status === "checked_in" ? "Checked In" : "Checked Out"}
        </Tag>
      ),
    },
    {
      title: "Actions",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            type="text"
            icon={<EyeOutlined />}
            onClick={() => showGuestDetails(record)}
            title="View Details"
          />
          {record.status === "checked_in" && (
            <Button
              type="text"
              icon={<LogoutOutlined />}
              onClick={() => handleCheckOut(record.id)}
              title="Check Out"
            />
          )}
          <Popconfirm
            title="Are you sure you want to delete this guest record?"
            onConfirm={() => handleDelete(record.id)}
            okText="Yes"
            cancelText="No"
          >
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
              title="Delete"
            />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div className="admin-container">
      <Card
        title={
          <Space>
            <Button
              type="text"
              icon={<ArrowLeftOutlined />}
              onClick={() => navigate("/")}
            />
            <Title level={2} style={{ margin: 0 }}>
              Admin Dashboard
            </Title>
          </Space>
        }
        extra={
          <Button
            icon={<ReloadOutlined />}
            onClick={() => {
              fetchGuests();
              fetchStats();
            }}
          >
            Refresh
          </Button>
        }
      >
        {/* Statistics */}
        <Row gutter={16} className="stats-card">
          <Col xs={24} sm={8}>
            <Card>
              <Statistic
                title="Total Guests"
                value={stats.totalGuests || 0}
                prefix={<UserOutlined />}
              />
            </Card>
          </Col>
          <Col xs={24} sm={8}>
            <Card>
              <Statistic
                title="Today's Visitors"
                value={stats.todayGuests || 0}
                prefix={<CheckCircleOutlined />}
                valueStyle={{ color: "#3f8600" }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={8}>
            <Card>
              <Statistic
                title="Currently Checked In"
                value={stats.checkedInGuests || 0}
                prefix={<ClockCircleOutlined />}
                valueStyle={{ color: "#1890ff" }}
              />
            </Card>
          </Col>
        </Row>

        {/* Filters */}
        <Card style={{ marginBottom: 16 }}>
          <Row gutter={16}>
            <Col xs={24} sm={8}>
              <Input.Search
                placeholder="Search by name, email, or company"
                allowClear
                onSearch={handleSearch}
                style={{ width: "100%" }}
              />
            </Col>
            <Col xs={24} sm={6}>
              <Select
                placeholder="Filter by status"
                allowClear
                style={{ width: "100%" }}
                onChange={handleStatusFilter}
              >
                <Option value="checked_in">Checked In</Option>
                <Option value="checked_out">Checked Out</Option>
              </Select>
            </Col>
            <Col xs={24} sm={10}>
              <RangePicker
                style={{ width: "100%" }}
                onChange={handleDateFilter}
                placeholder={["Start Date", "End Date"]}
              />
            </Col>
          </Row>
        </Card>

        {/* Guest Table */}
        <Table
          columns={columns}
          dataSource={guests}
          rowKey="id"
          loading={loading}
          pagination={{
            ...pagination,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} of ${total} guests`,
          }}
          onChange={handleTableChange}
          scroll={{ x: 800 }}
        />
      </Card>

      {/* Guest Details Modal */}
      <Modal
        title="Guest Details"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            Close
          </Button>,
          selectedGuest?.status === "checked_in" && (
            <Button
              key="checkout"
              type="primary"
              icon={<LogoutOutlined />}
              onClick={() => {
                handleCheckOut(selectedGuest.id);
                setModalVisible(false);
              }}
            >
              Check Out
            </Button>
          ),
        ]}
        width={600}
      >
        {selectedGuest && (
          <div>
            <Row gutter={16}>
              <Col span={12}>
                <p>
                  <strong>Name:</strong> {selectedGuest.name}
                </p>
                <p>
                  <strong>Email:</strong> {selectedGuest.email}
                </p>
                <p>
                  <strong>Phone:</strong> {selectedGuest.phoneNumber}
                </p>
                <p>
                  <strong>Company:</strong> {selectedGuest.company || "N/A"}
                </p>
                <p>
                  <strong>Role:</strong> {selectedGuest.role}
                </p>
              </Col>
              <Col span={12}>
                <p>
                  <strong>Check In:</strong>{" "}
                  {dayjs(selectedGuest.checkInTime).format("DD/MM/YYYY HH:mm")}
                </p>
                {selectedGuest.checkOutTime && (
                  <p>
                    <strong>Check Out:</strong>{" "}
                    {dayjs(selectedGuest.checkOutTime).format(
                      "DD/MM/YYYY HH:mm"
                    )}
                  </p>
                )}
                <p>
                  <strong>Status:</strong>
                  <Tag
                    color={
                      selectedGuest.status === "checked_in" ? "green" : "blue"
                    }
                    style={{ marginLeft: 8 }}
                  >
                    {selectedGuest.status === "checked_in"
                      ? "Checked In"
                      : "Checked Out"}
                  </Tag>
                </p>
              </Col>
            </Row>

            <div style={{ marginTop: 16 }}>
              <p>
                <strong>Purpose of Visit:</strong>
              </p>
              <p
                style={{
                  backgroundColor: "#f5f5f5",
                  padding: 8,
                  borderRadius: 4,
                }}
              >
                {selectedGuest.purpose}
              </p>
            </div>

            <div style={{ marginTop: 16 }}>
              <p>
                <strong>ID Photo:</strong>
              </p>
              {selectedGuest.idPhotoPath && (
                <Image
                  src={`${axios.defaults.baseURL || ""}${
                    selectedGuest.idPhotoPath
                  }`}
                  alt="Guest ID"
                  style={{ maxWidth: "100%", maxHeight: 300 }}
                />
              )}
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default Admin;
